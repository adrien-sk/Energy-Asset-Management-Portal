// <auto-generated />
using System;
using System.Collections.Generic;
using EnergyPortal.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnergyPortal.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250706124721_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnergyPortal.Domain.Assets.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Capacity", "EnergyPortal.Domain.Assets.Asset.Capacity#Capacity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Output")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("CapacityValue");

                            b1.Property<int>("Unit")
                                .HasMaxLength(10)
                                .HasColumnType("int")
                                .HasColumnName("CapacityUnit");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SiteId")
                        .HasDatabaseName("IX_Assets_SiteId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Assets_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Assets_Type");

                    b.ToTable("Assets");

                    b.HasDiscriminator<string>("AssetType").HasValue("Asset");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EnergyPortal.Domain.Sites.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Location", "EnergyPortal.Domain.Sites.Site.Location#Location", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("Latitude")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Longitude")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Sites_Name");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("EnergyPortal.Domain.Assets.Battery", b =>
                {
                    b.HasBaseType("EnergyPortal.Domain.Assets.Asset");

                    b.Property<decimal>("ChargeCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CycleCount")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxChargeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxDischargeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StateOfHealth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Battery");
                });

            modelBuilder.Entity("EnergyPortal.Domain.Assets.Inverter", b =>
                {
                    b.HasBaseType("EnergyPortal.Domain.Assets.Asset");

                    b.Property<decimal>("ACOutput")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ACVoltage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DCInput")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DCVoltage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Frequency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Assets", t =>
                        {
                            t.Property("Temperature")
                                .HasColumnName("Inverter_Temperature");
                        });

                    b.HasDiscriminator().HasValue("Inverter");
                });

            modelBuilder.Entity("EnergyPortal.Domain.Assets.SolarPanel", b =>
                {
                    b.HasBaseType("EnergyPortal.Domain.Assets.Asset");

                    b.Property<decimal>("Azimuth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TiltAngle")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("SolarPanel");
                });

            modelBuilder.Entity("EnergyPortal.Domain.Assets.Asset", b =>
                {
                    b.HasOne("EnergyPortal.Domain.Sites.Site", null)
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
